import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import { Button } from "~/component/Button";
import { FormGroup } from "~/component/FormGroup";
import { api } from "~/utils/api";
import { Input } from "../component/Input";
import { stylesData } from "../data/stylesData"; // Updated import location

const GeneratePage: NextPage = () => {
  const [form, setForm] = useState({
    name: "",
    basePrompt: "",
    numberofImages: "1",
  });

  const [error, setError] = useState("");
  const [imagesUrl, setImagesUrl] = useState<{ imageUrl: string }[]>([]);
  const [activeTab, setActiveTab] = useState<keyof typeof stylesData>("Modern");
  const [selectedImage, setSelectedImage] = useState<string | null>(null);

  const generateIcon = api.generate.generateIcon.useMutation({
    onSuccess(data) {
      setImagesUrl(data);
    },
    onError(error) {
      console.log(error);
      setError(error.message);
    },
  });

  function handleFormSubmit(e: React.FormEvent) {
    e.preventDefault();

    if (!form.name || !form.basePrompt) {
      setError("Please type your name and select a style.");
      return;
    }

    const finalPrompt = `${form.basePrompt.replace("Text", form.name)}`;

    generateIcon.mutate({
      prompt: finalPrompt,
      numberOfImages: parseInt(form.numberofImages),
    });
  }

  function updateForm(key: string) {
    return function (e: React.ChangeEvent<HTMLInputElement>) {
      setForm((prev) => ({
        ...prev,
        [key]: e.target.value,
      }));
    };
  }

  function handleImageSelect(basePrompt: string, src: string) {
    setSelectedImage(src);
    setForm((prev) => ({
      ...prev,
      basePrompt,
    }));
    setError("");
  }

  return (
    <>
      <Head>
        <title>Name Design AI</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container m-auto mb-24 flex flex-col px-8 py-8 max-w-screen-md">
        <h1 className="text-6xl">Generate your design</h1>
        <p className="text-2xl">Type your name / text</p>
        <form className="flex flex-col gap-3" onSubmit={handleFormSubmit}>
          <h2 className="text-xl">1. Type your name</h2>
          <FormGroup className="mb-12">
            <label>Name</label>
            <Input
              required
              value={form.name}
              onChange={updateForm("name")}
              placeholder="Type your name here"
            />
          </FormGroup>

          <h2 className="text-xl">2. Pick your style</h2>
          <div className="mb-12">
            {/* Tabs */}
            <div className="flex border-b mb-4">
              {Object.keys(stylesData).map((style) => (
                <button
                  key={style}
                  type="button"
                  onClick={() => setActiveTab(style as keyof typeof stylesData)}
                  className={`px-4 py-2 ${
                    activeTab === style
                      ? "border-b-2 border-blue-500 text-blue-500"
                      : "text-gray-500"
                  }`}
                >
                  {style}
                </button>
              ))}
            </div>

            {/* Image Grid */}
            <div className="grid grid-cols-4 sm:grid-cols-4 md:grid-cols-6 gap-4 max-w-30">
              {stylesData[activeTab].map(({ src, basePrompt }, index) => (
                <div
                  key={index}
                  className={`rounded shadow-md hover:shadow-lg transition cursor-pointer ${
                    selectedImage === src ? "ring-4 ring-blue-500" : ""
                  }`}
                  onClick={() => handleImageSelect(basePrompt, src)}
                >
                  <img
                    src={src}
                    alt={basePrompt}
                    className="rounded w-30 h-30 min-w-20 min-h-20 object-cover mx-auto"
                  />
                </div>
              ))}
            </div>
          </div>

          <h2 className="text-xl">3. How many do you want?</h2>
          <FormGroup className="mb-12">
            <label>Number of images</label>
            <Input
              required
              inputMode="numeric"
              pattern="[1-9]|10"
              value={form.numberofImages}
              onChange={updateForm("numberofImages")}
            />
          </FormGroup>

          {error && (
            <div className="bg-red-500 text-white rounded p-8 text-xl">
              {error}
            </div>
          )}

          <Button
            isLoading={generateIcon.isLoading}
            disabled={generateIcon.isLoading}
          >
            Submit
          </Button>
        </form>

        {imagesUrl.length > 0 && (
          <>
            <h2 className="text-xl">Your images</h2>
            <section className="grid grid-cols-4 gap-4 mb-12">
              {imagesUrl.map(({ imageUrl }) => (
                <Image
                  key={imageUrl}
                  src={imageUrl}
                  alt="an image of your generated prompt"
                  width="512"
                  height="512"
                  className="w-full"
                />
              ))}
            </section>
          </>
        )}
      </main>
    </>
  );
};

export default GeneratePage;
